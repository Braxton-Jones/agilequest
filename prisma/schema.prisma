// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relationships
  projects  Project[]
}


model Project {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  // Relationships
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  battlepasses Battlepass[]
}


model Battlepass {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  // Relationships
  project     Project   @relation(fields: [projectId], references: [id])
  projectId   Int
  tasks       Task[]
}


model Task {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  // Relationships
  battlepass  Battlepass @relation(fields: [battlepassId], references: [id])
  battlepassId Int
  subtasks    Subtask[]
}

// Subtask model
model Subtask {
  id          Int       @id @default(autoincrement())
  title       String
  completed   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  // Relationships
  task        Task      @relation(fields: [taskId], references: [id])
  taskId      Int
}
